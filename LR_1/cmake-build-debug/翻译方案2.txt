Program -> Program_head Program_body .
Program_head -> program id A ( Identifier_list ) ;
Program_body -> Const_declarations Type_declarations Var_declarations Subprogram_declarations Compound_statement
Identifier_list -> Identifier_list1 , id {id.name = stack[top]声明：查询本块中是否重复定义，插入id}{Identifier_list.ID_list_head,我们设Identifier_list有这样一个综合属性，它是一个链表头，链表元素是id在符号表的入口地址}
Identifier_list -> id {id.name = stack[top]声明：查询本块中是否重复定义，插入id}
Const_declarations -> const Const_declaration ;
Const_declarations -> #
Const_declaration -> Const_declaration ; id = Const_variable {id.name = stack[top - 2]声明：查询本块中是否重复定义，插入id}
Const_declaration -> id = Const_variable {id.name = stack[top - 2]声明：查询本块中是否重复定义，插入id}
Const_variable -> + id {id.name = stack[top] 引用}
Const_variable -> - id {id.name = stack[top] 引用}
Const_variable -> id {id.name = stack[top] 引用}
Const_variable -> + num
Const_variable -> - num
Const_variable -> num {Const_variable.num = stack[top]}
Const_variable -> string
Type_declarations -> type Type_declaration ;
Type_declarations -> #
Type_declaration -> Type_declaration ; id = Type {id.name = stack[top - 2]声明, Type.type和Type.width}
Type_declaration -> id = Type {id.name = stack[top - 2]声明, Type.type和Type.width}
Type -> Standard_type {Type.type = Standard_type.type; Type.width = Standard_type.width}
Type -> record E22 Record_body end {Type.type = RECORD, Type.tableEntry = curBlock,重定位}
Type0 -> array [ Periods ] of Type {Type0.type = ARRAY,把Type.arrayInfo链表插入到Periods.arrayInfo链表的尾部,把ArrayInfo的头指针赋值给Type0.arrayInfo, 计算Type0.width}
Standard_type -> integer {Standard_type.type = 1; Standard_type.width = 4}
Standard_type -> real {Standard_type.type = 2; Standard_type.width = 4}
Standard_type -> boolean {Standard_type.type = 3; Standard_type.width = 1}
Standard_type -> char {Standard_type.type = 4; Standard_type.width = 1}
Record_body -> Var_declaration
Record_body -> #
Periods0 -> Periods1 , Period {Periods0.demension = Periods1.demension + 1, 把Period构成的ArrayInfo插入到Periods1.arrayInfo链表的尾部，把链表的头指针赋值给Periods0.arrayInfo }
Periods -> Period {Periods.demension = 1, Periods.arrayInfo.startIndex, Periods.arrayInfo.endIndex, Periods.arrayInfo.demensionTH}
Period -> Const_variable0 .. Const_variable1 {Period.arrayInfo.startIndex, Period.arrayInfo.endIndex, Period.arrayInfo.withd}
Var_declarations -> var Var_declaration ;
Var_declarations -> #
Var_declaration0 -> Var_declaration ; Identifier_list : Type {遍历Identifier_list.IDlist,填写type}
Var_declaration -> Identifier_list : Type {遍历Identifier_list.IDlist,填写type}
Subprogram_declarations -> Subprogram_declarations Subprogram_declaration ;
Subprogram_declarations -> #
Subprogram_declaration -> Subprogram_head Program_body
Subprogram_head -> function id B Formal_parameter : Standard_type ;
Subprogram_head -> procedure id C Formal_parameter ;
Formal_parameter -> ( Parameter_lists )
Formal_parameter -> #
Parameter_lists -> Parameter_lists ; Parameter_list
Parameter_lists -> Parameter_list
Parameter_list -> Var_parameter
Parameter_list -> Value_parameter
Var_parameter -> var Value_parameter
Value_parameter -> Identifier_list : Standard_type {遍历Identifier_list.IDlist,填写type}
Compound_statement -> begin Statement_list end {重定位}
Statement_list -> Statement_list ; Statement
Statement_list -> Statement
Statement -> Variable assignop Expression
Statement -> Call_procedure_statement
Statement -> Compound_statement
Statement -> if Expression then Statement Else_part
Statement -> case Expression of Case_body end
Statement -> while Expression do Statement
Statement -> repeat Statement_list until Expression
Statement -> for id assignop Expression D Updown Expression do Statement
Statement -> #
Variable -> id Id_varparts {id.name = stack[top-1] 引用}
Id_varparts -> Id_varparts Id_varpart
Id_varparts -> #
Id_varpart -> [ Expression_list ]
Id_varpart -> . id {id.name = stack[top] 引用}
Else_part -> else Statement
Else_part -> #
Case_body -> Branch_list
Case_body -> #
Branch_list -> Branch_list ; Branch
Branch_list -> Branch
Branch -> Const_list : Statement
Const_list -> Const_list , Const_variable
Const_list -> Const_variable
Updown -> to
Updown -> downto
Call_procedure_statement -> id {id.name = stack[top] 引用}
Call_procedure_statement -> id ( Expression_list ) {id.name = stack[top-3] 引用}
Expression_list -> Expression_list , Expression
Expression_list -> Expression
Expression -> Simple_expression = Simple_expression
Expression -> Simple_expression <> Simple_expression
Expression -> Simple_expression < Simple_expression
Expression -> Simple_expression <= Simple_expression
Expression -> Simple_expression > Simple_expression
Expression -> Simple_expression >= Simple_expression
Expression -> Simple_expression
Simple_expression -> Term
Simple_expression -> + Term
Simple_expression -> - Term
Simple_expression -> Simple_expression + Term
Simple_expression -> Simple_expression - Term
Simple_expression -> Simple_expression or Term
Term -> Term * Factor
Term -> Term / Factor
Term -> Term div Factor
Term -> Term mod Factor
Term -> Term and Factor
Term -> Factor
Factor -> Unsign_const_variable
Factor -> variable
Factor -> id ( Expression_list ) {id.name = stack[top-3] 引用}
Factor -> ( Expression )
Factor -> not Factor
Unsign_const_variable -> id {id.name = stack[top] 引用}
Unsign_const_variable -> num
Unsign_const_variable -> string
A -> # {id的属性在stack[top] 定位，声明，插入id}
B -> # {id.name在stack[top] 声明，定位，插入id}
C -> # {id.name在stack[top] 声明，定位，插入id}
D -> # {id.name在stack[top] 引用：查询本块、父块中id是否有定义}
E22 -> # {record 定位}
